{"version":3,"sources":["App.js","index.js"],"names":["operations","NavBarGame","props","console","log","Navbar","bg","variant","Container","Brand","Toggle","aria-controls","Collapse","id","Nav","className","href","style","backgroundColor","running","borderRadius","onClick","e","preventDefault","setRunningFunction","runningRefTrue","runSimulation","randomGrid","setGridFunction","NavDropdown","title","vel","Item","setVelFunction","velRefChange","App","cleanBoard","rows","i","push","Array","from","useState","grid","setGrid","setRunning","press","setPress","setVel","runningRef","useRef","current","velRef","useCallback","g","produce","gridCopy","k","neightbors","forEach","x","y","newI","newK","setTimeout","actual","num","Math","random","display","justifyContent","alignItems","gridTemplateColumns","map","square","onMouseDown","newGrid","onMouseEnter","onMouseUp","key","width","height","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAWMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,IAGFC,EAAa,SAACC,GAElB,OADAC,QAAQC,IAAI,mBAEV,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAOI,MAAR,4BACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,wBAAIA,UAAU,mBACZ,uBAAGC,KAAK,UAAUD,UAAU,WAC1BE,MAAO,CACLC,gBAAkBhB,EAAMiB,QAAsB,UAAZ,UAClCC,aAAc,QAEhBC,QAAS,SAACC,GACRA,EAAEC,iBACFrB,EAAMsB,oBAAoBtB,EAAMiB,SAC3BjB,EAAMiB,UACTjB,EAAMuB,iBACNvB,EAAMwB,mBAGVxB,EAAMiB,QAAU,OAAS,QAb3B,MAeF,wBAAIJ,UAAU,oBACZ,uBAAGC,KAAK,UAAUD,UAAU,WAAWM,QAAS,SAACC,GAC/CA,EAAEC,iBACFrB,EAAMyB,eAFR,eAKF,wBAAIZ,UAAU,oBACZ,uBAAGC,KAAK,UAAUD,UAAU,WAAWM,QAAS,SAACC,GAC/CA,EAAEC,iBACFrB,EAAM0B,oBAFR,aAKF,kBAACC,EAAA,EAAD,CAAaC,MAAK,sBAAiB5B,EAAM6B,KAAOlB,GAAG,sBACjD,kBAACgB,EAAA,EAAYG,KAAb,CAAkBhB,KAAK,IAAIK,QAAS,SAACC,GACnCA,EAAEC,iBACFrB,EAAM+B,eAAe,KACrB/B,EAAMgC,aAAa,OAHrB,SAKA,kBAACL,EAAA,EAAYG,KAAb,CAAkBhB,KAAK,IAAIK,QAAS,SAACC,GACnCA,EAAEC,iBACFrB,EAAM+B,eAAe,KACrB/B,EAAMgC,aAAa,OAHrB,UAMA,kBAACL,EAAA,EAAYG,KAAb,CAAkBhB,KAAK,IAAIK,QAAS,SAACC,GACnCA,EAAEC,iBACFrB,EAAM+B,eAAe,IACrB/B,EAAMgC,aAAa,MAHrB,gBAgKCC,MAlJf,WAEE,IAAMC,EAAa,WAEjB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhFJ,GAgFiBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhFX,KAgF2B,kBAAM,MAE7C,OAAOH,GAPI,EAUWK,oBAAS,WAC/B,OAAON,OAXI,mBAUNO,EAVM,KAUAC,EAVA,OAaiBF,oBAAS,GAb1B,mBAaNvB,EAbM,KAaG0B,EAbH,OAcaH,qBAdb,mBAcNI,EAdM,KAcCC,EAdD,OAeSL,mBAAS,KAflB,mBAeNX,EAfM,KAeDiB,EAfC,KAiBPC,EAAaC,iBAAO/B,GAC1B8B,EAAWE,QAAUhC,EAErB,IAAMiC,EAASF,iBAAOnB,GACtBqB,EAAOD,QAAUpB,EAEjB,IA2BML,EAAgB2B,uBAAY,WAC3BJ,EAAWE,UAGhBP,GAAQ,SAAAU,GACN,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBlB,GACP,IAF0B,eAEjBmB,GACP,IAAIC,EAAa,EACjB1D,EAAW2D,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOxB,EAAIsB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA1If,IA0IiCC,GAAQ,GAAKA,EAzI9C,KA0IAL,GAAcJ,EAAEQ,GAAMC,OAItBL,EAAa,GAAKA,EAAa,EACjCF,EAASlB,GAAGmB,GAAK,EACI,IAAZH,EAAEhB,GAAGmB,IAA2B,IAAfC,IAC1BF,EAASlB,GAAGmB,GAAK,IAbZA,EAAI,EAAGA,EApIV,GAoIuBA,IAAM,EAA1BA,IADFnB,EAAI,EAAGA,EApIR,GAoIqBA,IAAM,EAA1BA,SAoBb0B,WAAWtC,EAAe0B,EAAOD,YAEhC,IAIH,OACE,oCACE,kBAAC,EAAD,CACE3B,mBAlDqB,SAACyC,GAC1BpB,EAAWoB,IAkDP9C,QAASA,EACTM,eAhDiB,WACrBwB,EAAWE,SAAU,GAgDjBzB,cAAeA,EACfK,IAAKA,EACLE,eA/CiB,SAACiC,GACtBlB,EAAOkB,IA+CHhC,aA5Ce,SAACgC,GACpBd,EAAOD,QAAUe,GA4CbtC,gBArEkB,WACtBgB,EAAQR,MAqEJT,WAlEa,WAEjB,IADA,IAAMU,EAAO,GACJC,EAAI,EAAGA,EAzGJ,GAyGiBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAzGX,KAyG2B,kBAAM2B,KAAKC,SAAW,GAAM,EAAI,MAEvExB,EAAQP,MA+DN,yBAAKpB,MAAO,CACVoD,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAEZ,yBAAKtD,MAAO,CACVoD,QAAS,OACTG,oBAAoB,UAAD,OAjLb,GAiLa,aAElB7B,EAAK8B,KAAI,SAACpC,EAAMC,GAAP,OAAaD,EAAKoC,KAAI,SAACC,EAAQjB,GACvC,OACE,yBACEkB,YAAa,WACX,IAAMC,EAAUrB,YAAQZ,GAAM,SAAAa,GAC5BA,EAASlB,GAAGmB,GAAKD,EAASlB,GAAGmB,GAAK,EAAI,KAExCb,EAAQgC,GACR7B,GAAS,IAGX8B,aAAc,WACZ,GAAI/B,EAAO,CACT,IAAM8B,EAAUrB,YAAQZ,GAAM,SAAAa,GAC5BA,EAASlB,GAAGmB,GAAKD,EAASlB,GAAGmB,GAAK,EAAI,KAExCb,EAAQgC,KAIZE,UAAW,WACT/B,GAAS,IAGXgC,IAAG,UAAKzC,EAAL,YAAUmB,GAEb5C,GAAE,UAAKyB,EAAL,YAAUmB,GACZxC,MAAO,CACL+D,MAAO,GACPC,OAAQ,GACR/D,gBAAiByB,EAAKL,GAAGmB,GAAK,qBAAkByB,EAChDC,OAAQ,8CCvN1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6c854adf.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport produce from 'immer';\n\nconst numRows = 24;\nconst numCols = 54;\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n  [-1, 0],\n  [-1, 1],\n  [-1, -1]\n]\n\nconst NavBarGame = (props) => {\n  console.log('repitando barra')\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand >El Juego de la vida</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <li className=\"nav-item active\">\n              <a href=\"http://\" className=\"nav-link\"\n                style={{\n                  backgroundColor: !props.running ? '#01DF74' : '#FE2E2E',\n                  borderRadius: '15px',\n                }}\n                onClick={(e) => {\n                  e.preventDefault();\n                  props.setRunningFunction(!props.running);\n                  if (!props.running) {\n                    props.runningRefTrue();\n                    props.runSimulation();\n                  }\n                }}\n              >{props.running ? 'Stop' : 'Start'} </a>\n            </li>\n            <li className=\"nav- item active\">\n              <a href=\"http://\" className=\"nav-link\" onClick={(e) => {\n                e.preventDefault();\n                props.randomGrid();\n              }}>Aleatorio </a>\n            </li>\n            <li className=\"nav- item active\">\n              <a href=\"http://\" className=\"nav-link\" onClick={(e) => {\n                e.preventDefault();\n                props.setGridFunction();\n              }}>Limpiar </a>\n            </li>\n            <NavDropdown title={`Velocidad = ${props.vel}`} id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#\" onClick={(e) => {\n                e.preventDefault();\n                props.setVelFunction(500);\n                props.velRefChange(500);\n              }}>Lento</NavDropdown.Item>\n              <NavDropdown.Item href=\"#\" onClick={(e) => {\n                e.preventDefault();\n                props.setVelFunction(200);\n                props.velRefChange(200);\n              }}>\n                Normal</NavDropdown.Item>\n              <NavDropdown.Item href=\"#\" onClick={(e) => {\n                e.preventDefault();\n                props.setVelFunction(50);\n                props.velRefChange(50);\n              }}>Rapido</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  )\n}\n\n\nfunction App() {\n\n  const cleanBoard = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  }\n\n  const [grid, setGrid] = useState(() => {\n    return cleanBoard();\n  });\n  const [running, setRunning] = useState(false);\n  const [press, setPress] = useState();\n  const [vel, setVel] = useState(500);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const velRef = useRef(vel);\n  velRef.current = vel;\n\n  const setGridFunction = () => {\n    setGrid(cleanBoard())\n  }\n\n  const randomGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n    }\n    setGrid(rows);\n  }\n\n  const setRunningFunction = (actual) => {\n    setRunning(actual);\n  }\n\n  const runningRefTrue = () => {\n    runningRef.current = true;\n  }\n\n  const setVelFunction = (num) => {\n    setVel(num);\n  }\n\n  const velRefChange = (num) => {\n    velRef.current = num;\n  }\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return\n    }\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neightbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neightbors += g[newI][newK]\n              }\n            });\n\n            if (neightbors < 2 || neightbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neightbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      })\n    })\n    setTimeout(runSimulation, velRef.current);\n\n  }, [])\n\n\n\n  return (\n    <>\n      <NavBarGame\n        setRunningFunction={setRunningFunction}\n        running={running}\n        runningRefTrue={runningRefTrue}\n        runSimulation={runSimulation}\n        vel={vel}\n        setVelFunction={setVelFunction}\n        velRefChange={velRefChange}\n        setGridFunction={setGridFunction}\n        randomGrid={randomGrid}\n      />\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}>\n        <div style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 25px)`\n        }}>\n          {grid.map((rows, i) => rows.map((square, k) => {\n            return (\n              <div\n                onMouseDown={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\n                  })\n                  setGrid(newGrid)\n                  setPress(true)\n                }}\n\n                onMouseEnter={() => {\n                  if (press) {\n                    const newGrid = produce(grid, gridCopy => {\n                      gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\n                    })\n                    setGrid(newGrid)\n                  }\n                }}\n\n                onMouseUp={() => {\n                  setPress(false);\n                }}\n\n                key={`${i}-${k}`}\n\n                id={`${i}-${k}`}\n                style={{\n                  width: 25,\n                  height: 25,\n                  backgroundColor: grid[i][k] ? 'DarkTurquoise' : undefined,\n                  border: 'solid 0.1px rgb(175, 216, 248)'\n                }} >\n\n              </div>)\n          }))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}